TODOS:
- How do we store in SharedPreferences (what specific format)?
- Messages sent without recipient will get put in backlog for one specific user object
- When a user connects through login, we can pull all those things in the backlog, parse them, then delete the ids of the messages we successfully parsed (send a call back to delete at the end)
- All messages parsed from backlog and received directly from websocket get saved in SharedPreferences
- Each message object in the backlog will have a senderID, timestamp, message, and index (which is what we will send back for identifying what to delete)

- Matchmaking

- IF TIME TOMORROW: EXTRA FIELDS IN PREVIEWS


- Should have DMs page show partial matches as pending and full matches as normal
	- Can tell based on the stored account for that match and if they have the user's ID in their userID in THEIR list

Matching:
- Get all users for matching (initially, can filter client side if we have any time left)
- When they do swipe right, set a put request to update them in the server (adding new user to their matches)
- Also update their match list to include other user's account class, so that DM's can pull that data.

- Note: When testing singup form, if you reload with changes during the process, the account being edited will be emptied, although the data in the form will not since nothing is being rebuilt there.
	- Form will say it's not filled out when you try to advance. Just restart the app and try again. No problem during normal testing conditions.


Collection data signup page:
- Username (3+ chars)
- Email
- Password
- Personal bio
- DOB
- Interests (3 to 10)
- City
- Country
- School
- Major
- Profile image (done separately)





Fix app name in:
- android/app/src/main/AndroidManifest.xml - android:label = "NameTBD"
- ios/Runner/info.plist ->
	<key>CFBundleName</key>
	<string>NameTBD</string> //This one